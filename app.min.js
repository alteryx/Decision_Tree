var toggleBarItems = [
  {name: 'model_type', values: ['auto', 'classification', 'regression']},
  {name: 'tree_summary', values: ["Counts", "Proportions"]},
  {name: "pruning_plot_size", values: ["prune.inches", "prune.centimeters"]},
  {name: "tree_plot_size", values: ["tree.inches", "tree.centimeters"]}
]

Alteryx.Gui.BeforeLoad = function(manager, AlteryxDataItems){
  console.log("Before Load ----");
  var dataItem = makeDataItem(manager, AlteryxDataItems);
  dataItem('use.gini', {value: true}, 'SimpleBool')
  dataItem('use.information', {value: false}, 'SimpleBool')
  var surrogates = [
    ['usesurrogate.0', 'usesurrogate.1', 'usesurrogate.2'], 
    ['total.correct' , 'percent.correct']
  ]
  surrogates.forEach(function(d){
    d.forEach(function(d2){
      dataItem(d2, {value: d2 === d[0]}, 'SimpleBool')
    })
  })
  toggleBarItems.forEach(function(d){
    setupToggleBarItems(dataItem, d.name, d.values)
  })
};

var allowedTypes = [
  'Int16', 'Int32', 'Int64', 'Float', 'Double', 'FixedDecimal',
  'String', 'WString', 'V_String', 'V_WString'
]

Alteryx.Gui.AfterLoad = function(manager){
  console.log("After Load ----");
  handleSetupComplete()
  makeFieldMap('X Vars', allowedTypes)
  displayTarget('div-use.weights', 'use.weights')
  displayTarget('div-tree.plot', 'tree.plot')
  displayTarget('div-prune.plot', 'prune.plot')
  displayTarget('div-treeplot-in', 'tree_plot_size', 'tree.inches')
  displayTarget('div-treeplot-cm', 'tree_plot_size', 'tree.centimeters')
  displayTarget('div-pruneplot-in', 'pruning_plot_size', 'prune.inches')
  displayTarget('div-pruneplot-cm', 'pruning_plot_size', 'prune.centimeters')
  displayTarget('div-cp', 'set_cp')
  //displayTarget('select-model-type', 'select.type')
  displayTarget('show-for-classification', 'model_type', 'classification')
  //displayTarget('show-for-classification', 'select.type')
  var varsToSync = [
    'splitting_criteria', 'surrogate_use', 'surrogate_split_criteria'
  ]
  varsToSync.forEach(function(d){
    syncRadio(manager, d)
  })
  toggleBarItems.forEach(function(d){
    setupToggleBar(manager, d.name)
  })
};

Alteryx.Gui.Annotation = function(manager){
  
};

function displayTarget(targetId, di, cond) {
  var resize = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

  var condition = void 0;
  if (typeof cond == 'undefined') {
    condition = function condition(v) {
      return v;
    };
  } else if (typeof cond == 'string') {
    condition = function condition(v) {
      return v === cond;
    };
  } else {
    condition = cond;
  }
  var dataItem = Alteryx.Gui.manager.GetDataItemByDataName(di);
  var targetDiv = document.getElementById(targetId);
  function display(v) {
    targetDiv.style.display = condition(v) ? 'block' : 'none';
    //console.log("Resizing ", v);
    //window.dispatchEvent(new Event('resize'));
  }
  dataItem.BindUserDataChanged(display);
  display(dataItem.value);
}

function syncRadio(manager, id){
  console.log("Syncing radio...")
  var di = manager.GetDataItemByDataName(id)
  var vals = di.StringList.enums.map(function(d){
    return d.dataName
  })
  console.log('Syncing...')
  console.log(vals)
  var setRadioVal = function(v){
    vals.map(function(v_){
      console.log(v_);
      console.log(v)
      manager.GetDataItemByDataName(v_).setValue(v_ === v)
      console.log(manager.GetDataItemByDataName(v_).getValue())
    })
  }
  setRadioVal(di.getValue())
  di.BindDataChanged(function(v){
    setRadioVal(v)
  })
}

function createUIObject(x) {
  function a2ui(d) {
    return { uiobject: d, dataname: d };
  }
  function o2ui(d) {
    return { uiobject: x[d], dataname: d };
  }
  const f = (x.constructor === Array) ? a2ui : o2ui;
  const y = (x.constructor === Array) ? x : Object.keys(x);
  return y.map(f);
}

function makeDataItem(manager, AlteryxDataItems) {
  return function f(id, props) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'SimpleString';

    var value = void 0;
    var dtype = type;
    /*
    if (props.values) {
      dtype = props.values.constructor === Array
        ? 'MultiStringSelector'
        : 'StringSelector';
    } else {
      dtype = type;
    }
    */
    console.log(dtype)
    var di = manager.GetDataItem(id);
    var newItem = di || new AlteryxDataItems[dtype]({ id: id, dataname: id });
    if (dtype === 'StringSelector' || dtype === 'MultiStringSelector') {
      var data = createUIObject(props.values);
      newItem.setStringList(data);
      value = props.value ? props.value : data[0].dataname;
    } else {
      value = props.value;
    }
    manager.AddDataItem(newItem);
    if (value) newItem.setValue(value);
    return newItem;
  };
}

function handleSetupComplete(){
  var manager = Alteryx.Gui.manager
  var items = ['Model Name', 'Y Var', 'X Vars']
  var showTick = function(){
    var incompleteItems = items
      .map(function(d){return manager.GetDataItem(d).value})
      .filter(function(d){return d == ""})
      .length
    if (incompleteItems === 0) {
      $("#switch-to-customize").css('visibility', 'visible')
    } else {
      $("#switch-to-customize").css('visibility', 'hidden')
    } 
  }
  showTick()
  items.forEach(function(d){
    manager.GetDataItem(d).BindUserDataChanged(showTick)
  })
}

function makeFieldMap(id, allowedTypes){
  var manager = Alteryx.Gui.manager
  if (manager.metaInfo.Get(0)){
    var fields = manager
      .metaInfo.Get(0)
      ._GetFields()
      .filter(d => allowedTypes.indexOf(d.strType) >= 0)
      .map(d => d.strName)
  } else {
    var fields = []
  }
  var di = manager.GetDataItem(id);
  di.setStringList(fields.map(function(d){
    return {uiobject: d, dataname: d}
  }), true)
  console.log(di.getValue())
}

function setupToggleBarItems(dataItem, dname, values){
  dataItem(dname, {value: values[0], values: values}, 'StringSelector')
  values.forEach(function(v){
    dataItem(v, {value: false}, 'SimpleBool')
  })
}

function jq( myid ) {
  return "#" + myid.replace( /(:|\.|\[|\]|,|=)/g, "\\$1" );
}

function setupToggleBar(manager, dname){
  //var vals = $("#id-" + dname + " .tab").map(function(){return $(this).data('page')})
  //var dataItem = makeDataItem(manager)
  //dataItem(dname, {values: vals, value: vals[0]}, 'StringSelector')
  var x = manager.GetDataItem(dname)
  syncRadio(manager, dname)
  function setToggle(v){
    console.log("#id-" + v)
    $('#id-' + dname +  ' .toggletab').removeClass('is-tab-selected')
    $(jq("id-" + v)).addClass('is-tab-selected')
  }
  $('#id-' + dname +  ' .toggletab').click(function(){
    x.setValue($(this).data('page'))
    setToggle(x.getValue())
  })
  setToggle(x.getValue())
  //x.BindUserDataChanged(setToggle)
}

